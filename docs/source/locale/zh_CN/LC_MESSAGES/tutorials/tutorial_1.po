# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, SMILE Lab
# This file is distributed under the same license as the FedLab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FedLab \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-28 12:46+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../source/tutorials/tutorial_1.rst:5
msgid "Distributed Communication"
msgstr ""

#: ../../source/tutorials/tutorial_1.rst:9
msgid "How to initialize distributed network?"
msgstr ""

#: ../../source/tutorials/tutorial_1.rst:11
msgid ""
"FedLab uses `torch.distributed "
"<https://pytorch.org/docs/stable/distributed.html>`_ as point-to-point "
"communication package. The communication backend is Gloo as default. "
"FedLab processes send/receive data through TCP network connection. If the"
" automatically detected interface is not correct, you need to choose the "
"network interface to use for Gloo, by setting the environment variables "
"``GLOO_SOCKET_IFNAME``, for example ``export GLOO_SOCKET_IFNAME=eth0`` or"
" ``os.environ['GLOO_SOCKET_IFNAME'] = \"eth0\"``."
msgstr ""

#: ../../source/tutorials/tutorial_1.rst:20
msgid "Check the available ethernet:"
msgstr ""

#: ../../source/tutorials/tutorial_1.rst:26
msgid ""
"You need to assign right ethernet to :class:`DistNetwork`, making sure "
"``torch.distributed`` network initialization works. :class:`DistNetwork` "
"is for quickly network configuration, which you can create one as "
"follows:"
msgstr ""

#: ../../source/tutorials/tutorial_1.rst:43
msgid ""
"The ``(server_ip, server_port)`` is the address of server. please be "
"aware of that the rank of server is 0 as default."
msgstr ""

#: ../../source/tutorials/tutorial_1.rst:44
msgid "Make sure ``world_size`` is the same across process."
msgstr ""

#: ../../source/tutorials/tutorial_1.rst:45
msgid "Rank should be different (from ``0`` to ``world_size-1``)."
msgstr ""

#: ../../source/tutorials/tutorial_1.rst:46
msgid "world_size = 1 (server) + client number."
msgstr ""

#: ../../source/tutorials/tutorial_1.rst:47
msgid ""
"The ethernet can be None, torch.distributed will try to find the right "
"ethernet. If it doesn't work, user need to assign right ethernet name."
msgstr ""

#: ../../source/tutorials/tutorial_1.rst:48
msgid ""
"The ``ethernet_name`` must be checked (using ``ifconfig``). Otherwise, "
"network initialization would fail."
msgstr ""

#: ../../source/tutorials/tutorial_1.rst:52
msgid "How to create package?"
msgstr ""

#: ../../source/tutorials/tutorial_1.rst:54
msgid ""
"The communication module of FedLab is in core/communicator. "
"core.communicator.Package defines the basic data structure of network "
"package. In our implementation, Package contains Header and Content."
msgstr ""

#: ../../source/tutorials/tutorial_1.rst:62
msgid "Currently, you can create a network package from following methods:"
msgstr ""

#: ../../source/tutorials/tutorial_1.rst:65
msgid ""
"Currently, **FedLab** only supports vectorized tensors as content, which "
"means that tensors with different shape should be flatterned before "
"appended into Package (call tensor.view(-1))."
msgstr ""

#: ../../source/tutorials/tutorial_1.rst:67
msgid "initialize with tensor"
msgstr ""

#: ../../source/tutorials/tutorial_1.rst:74
msgid "initialize with tensor list"
msgstr ""

#: ../../source/tutorials/tutorial_1.rst:82
msgid "append a tensor to exist package"
msgstr ""

#: ../../source/tutorials/tutorial_1.rst:92
msgid "append a tensor list to exist package"
msgstr ""

#: ../../source/tutorials/tutorial_1.rst:102
msgid "Two static methods are provided by Package to parse header and content:"
msgstr ""

#: ../../source/tutorials/tutorial_1.rst:111
msgid "How to send package?"
msgstr ""

#: ../../source/tutorials/tutorial_1.rst:113
msgid ""
"The point-to-point communicating agreements is implemented in "
"PackageProcessor module. PackageProcessor is a static class to manage "
"package sending/receiving procedure."
msgstr ""

#: ../../source/tutorials/tutorial_1.rst:115
msgid ""
"User can send a package to a process with rank=0 (the parameter dst must "
"be assigned):"
msgstr ""

#: ../../source/tutorials/tutorial_1.rst:122
msgid ""
"or, receive a package from rank=0 (set the parameter src=None to receive "
"package from any other process):"
msgstr ""

