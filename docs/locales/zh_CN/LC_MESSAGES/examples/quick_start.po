# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, SMILE Lab
# This file is distributed under the same license as the FedLab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FedLab \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-30 17:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../source/examples/quick_start.rst:5 97920d7ed4a64a8eb60af675b0b1da8f
msgid "Quick Start"
msgstr ""

#: ../../source/examples/quick_start.rst:7 59d65ef043ca46229b7616a7e34de301
msgid ""
"In this page, we introduce how to build a FL simulation system with "
"FedLab in cross machine or cross process scenario. We implement FedAvg "
"algorithm wit CNN and partitioned MNIST dataset across clients."
msgstr ""

#: ../../source/examples/quick_start.rst:11 09ff4063880e456cb360b1d9eb00309f
msgid ""
"Source code of this page can be seen in `fedlab-"
"benchmarks/fedavg/cross_machine <https://github.com/SMILELab-FL/FedLab-"
"benchmarks>`_."
msgstr ""

#: ../../source/examples/quick_start.rst:15 6fdea920b9654fea9157c99c85932d43
msgid "Download dataset"
msgstr ""

#: ../../source/examples/quick_start.rst:17 1ee79f2722c1461abe96bd44c87acbd2
msgid ""
"FedLab provides scripts for common dataset download and partition "
"process. Besides, FL dataset baseline LEAF :cite:p:`caldas2018leaf` is "
"also implemented and compatible with PyTorch interfaces."
msgstr ""

#: ../../source/examples/quick_start.rst:20 46b71c4f59624c5396b1b5ab048c89ed
msgid ""
"Codes related to dataset download process are available at "
"``fedlab_benchamrks/datasets/data/{dataset name}``."
msgstr ""

#: ../../source/examples/quick_start.rst:22 842d7bd99a6e4fd4accb0b53370c916d
msgid "Download MNIST/CIFAR10"
msgstr ""

#: ../../source/examples/quick_start.rst:29 7c1213726af641e8b833e706237c31bb
msgid "Partition"
msgstr ""

#: ../../source/examples/quick_start.rst:31 2cd8ff624eea45b3bf45711f0e0f8a50
msgid "Run follow python file to generate partition file."
msgstr ""

#: ../../source/examples/quick_start.rst:37 6143a0f4bc5446bc993f5f9ce2d52afd
msgid "Source codes of partition scripts:"
msgstr ""

#: ../../source/examples/quick_start.rst:54 0b2541d0b0f74658bba0e64ca876da56
msgid ""
"``data_indices`` is a ``dict`` mapping from client id to data "
"indices(list) of raw dataset. **FedLab** provides random partition and "
"non-I.I.D. partition methods, in which the noniid partition method is "
"totally reimplementation in paper fedavg."
msgstr ""

#: ../../source/examples/quick_start.rst:57 79f6ac6b867643afb34e68c768114f6d
msgid "LEAF dataset process"
msgstr ""

#: ../../source/examples/quick_start.rst:59 d8acd898497947ee8c8056d65ed365b7
msgid ""
"Please follow the `FedLab benchmark <https://github.com/SMILELab-"
"FL/FedLab/tree/v1.0/fedlab_benchmarks>`_ to learn how to generate LEAF "
"related dataset partition."
msgstr ""

#: ../../source/examples/quick_start.rst:64 8e6f3ce702954ecba5710422b66267b8
msgid "Run FedLab demos"
msgstr ""

#: ../../source/examples/quick_start.rst:66 7bcc9a08aeed4a0987ccb02ab7f21353
msgid ""
"**FedLab** provides both asynchronous and synchronous standard "
"implementation demos for uses to learn. Since the structure of out "
"implementations are similar, therefore, I  only introduce the usage of "
"synchronous FL system simulation demo(FedAvg) with different scenario in "
"this page."
msgstr ""

#: ../../source/examples/quick_start.rst:68 0ebc68cc6ebb45d18eafc76f05c43055
msgid ""
"**We are very confident in the readability of FedLab code, so we "
"recommend that users read the source code according to the following "
"demos for better understanding.**"
msgstr ""

#: ../../source/examples/quick_start.rst:71 dfa0aaf400ea408f800c960bc29cd2cc
msgid "1. Standalone"
msgstr ""

#: ../../source/examples/quick_start.rst:73 0475dde6b13e4da396804813077e861d
msgid ""
"Main process is under `fedlab_benchamrks/algorithm/fedavg/standalone "
"<https://github.com/SMILELab-"
"FL/FedLab/tree/v1.0/fedlab_benchmarks/algorithm/fedavg/standalone>`_. "
"This is a standard usage of :class:`SerialTrainer` which allows users to "
"simulate a group of clients with a single process."
msgstr ""

#: ../../source/examples/quick_start.rst:85 fe2c7c27d5084b4ca2cacb5e78d96bc2
msgid ""
"Run command above to start a single process simulating FedAvg algorithm "
"with 100 clients with"
msgstr ""

#: ../../source/examples/quick_start.rst:83 752c6bf6aac74e23aadeb9cf9dfe9bf6
msgid ""
"10 communication round in total, with 10 clients joining each round "
"randomly."
msgstr ""

#: ../../source/examples/quick_start.rst:88 0cdb599a75154c99b2618a8a107ac6ca
msgid "2. Cross-Machine"
msgstr ""

#: ../../source/examples/quick_start.rst:90 2d239c6b0d4e4e469694bf076726d49f
msgid "Start a FL simulation with 1 server and 2 clients."
msgstr ""

#: ../../source/examples/quick_start.rst:97 ba595e0748e84a099a2c11550a8083cf
msgid "The content of ``quick_start.sh`` is:"
msgstr ""

#: ../../source/examples/quick_start.rst:105 533f3a64950f4a67ba298281512d4204
msgid ""
"Cross Machine scenario allows users deploy their FL system in computer "
"cluster. In this case, we set the address of server as localhost. Then "
"three process will communicate with each other following standard FL "
"procedure."
msgstr ""

#: ../../source/examples/quick_start.rst:111 0ffade537be94de2b51cd21db48e65ef
msgid ""
"Due to the rank of torch.distributed is unique for every process. "
"Therefore, we use rank represent client id for this scenario."
msgstr ""

#: ../../source/examples/quick_start.rst:115 c23336f74e35441abf4da876c3ea713c
msgid "3. Scale"
msgstr ""

#: ../../source/examples/quick_start.rst:117 534ff409c7b24567a5b37761b749698c
msgid ""
":class:`SerialTrainer` uses less computer resources (single process) to "
"simulate multiple clients. Cross Machine is suit for computer cluster "
"deployment, simulating data-center FL system. In our experiment, the "
"world size of ``torch.distributed`` can't more than 50 (Denpends on "
"clusters), otherwise, the socket will crash, which limited the client "
"number of FL simulation."
msgstr ""

#: ../../source/examples/quick_start.rst:119 16e36373524c4c2aaae7678da29d1327
msgid ""
"To improve scalability, FedLab provides scale standard implementation to "
"combine :class:`SerialTrainer` and :class:`ClientManager`, which allows a"
" single process simulate multiple clients."
msgstr ""

#: ../../source/examples/quick_start.rst:122 28fe06bb41b7496cb4aedd63f0dff092
msgid ""
"Our experimental results are also based on this scenario. Source codes "
"are available in fedlab_benchamrks/algorithm/fedavg/scale/{experiment "
"setting name}."
msgstr ""

#: ../../source/examples/quick_start.rst:125 e062f214a2cd481a96429e19d09f1c00
msgid ""
"Here, I take mnist-cnn as example to introduce this demo. In this demo, "
"we set world_size=11 (1 ServerManager, 10 ClientManagers), and each "
"ClientManager represents 10 local client dataset partition. Our data "
"partition strategy follows the experimental setting of fedavg as well. In"
" this way, **we only use 11 processes to simulate a FL system with 100 "
"clients.**"
msgstr ""

#: ../../source/examples/quick_start.rst:127 a1ff110456e54a3d83443c6db9b49648
msgid ""
"To start this system, you need to open at least 2 terminal (we still use "
"localhost as demo. Use multiple machines is OK as long as with right "
"network configuration):"
msgstr ""

#: ../../source/examples/quick_start.rst:129 15174b70423b48acb85a1fef7abc4702
msgid "server (terminal 1)"
msgstr ""

#: ../../source/examples/quick_start.rst:135 3376440a77a64d2c847e7efe3b7a3908
msgid "clients (terminal 2)"
msgstr ""

#: ../../source/examples/quick_start.rst:141 076e037500bf4797bddf9f5695d0d232
msgid "The content of ``start_clt.sh``:"
msgstr ""

